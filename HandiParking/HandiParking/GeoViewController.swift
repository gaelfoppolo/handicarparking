//
//  GeoViewController.swift
//  HandiParking
//
//  Created by Ga√´l on 10/03/2015.
//  Copyright (c) 2015 KeepCore. All rights reserved.
//

import UIKit
import CoreLocation
import Alamofire
import SwiftyJSON

/// Contr√¥leur de la vue g√©olocalisation üìç

class GeoViewController: UIViewController, CLLocationManagerDelegate, GMSMapViewDelegate, UIActionSheetDelegate {
    
    //MARK: Variables
    
    /// lien de sortie vers la carte
    @IBOutlet weak var mapView: GMSMapView!
    
    /// adresse actuelle
    var address: String?
    
    /// bouton pour lancer la recherche de places - action
    @IBAction func launchButtonAction(sender: AnyObject) {
        if ServicesController().servicesAreWorking() {
            if let locationWasGet = locationManager.location {
                SwiftSpinner.show("Recherche en cours...")
                launchRecherche()
            } else {
                AlertViewController().locationWasNotGet()
            }
        }
    }
    
    /// bouton pour afficher les applications pour l'itin√©raire - layout
    @IBOutlet weak var itineraryButtonText: UIBarButtonItem!
    
    /// bouton pour afficher les applications pour l'itin√©raire - action
    @IBAction func itineraryButtonAction(sender: AnyObject) {
        if ServicesController().servicesAreWorking() {
            if let locationWasGet = locationManager.location {
                var sheet: UIActionSheet = UIActionSheet();
                let title: String = "S√©lectionnez l'application qui va prendre en charge votre itin√©raire";
                sheet.title = title;
                sheet.delegate = self;
                sheet.addButtonWithTitle("Annuler");
                sheet.cancelButtonIndex = 0;
                sheet.addButtonWithTitle("Plans");
                
                var installApps = MapsAppsData().getListOfInstalledMapsApps()
                
                for app in installApps {
                    sheet.addButtonWithTitle(app);
                }
                
                sheet.showInView(self.view);
                
            } else {
                AlertViewController().locationWasNotGet()
            }
        }
    }
    
    /// d√©claration d'un alias pour les notifications KVO + instanciation d'un contexte
    typealias KVOContext = UInt8
    var MyObservationContext = KVOContext()
    
    /// gestionnaire de la localisation
    var locationManager = CLLocationManager()
    
    /// rayon de recherche (m√®tres) des emplacements
    var rayon: RayonRecherche = RayonRecherche(rawValue: 1)!
    
    /// tableau des emplacements r√©cup√©r√©s
    var emplacements = [Emplacement]()
    
    /// gestionnaire des requ√™tes pour OpenStreetMap
    var managerOSM: Alamofire.Manager?
    
    /// gestionnaire des requ√™tes pour Google Maps
    var managerGM: Alamofire.Manager?
    
    /// tableau de marqueurs ajout√©s sur la carte
    var markers = [PlaceMarker]()
    
    // MARK: D√©marrage
    
    /**
        Instanciation de la vue
        
        - initialise les composants n√©cessaires
    */
    override func viewDidLoad() {
        
        super.viewDidLoad()
        
        // set le titre dans la barre de navigation
        title = "G√©olocalisation"
        
        // fait de la vue le d√©l√©gu√© de locationMananger afin d'utiliser la localisation
        // demande l'autorisation si besoin
        // fait de la vue le d√©l√©gu√© de mapView afin d'utiliser la carte
        locationManager.delegate = self
        locationManager.requestWhenInUseAuthorization()
        mapView.delegate = self
        
        // instanciation du manager de requ√™tes OSM + GM
        let configurationOSM = NSURLSessionConfiguration.defaultSessionConfiguration()
        configurationOSM.timeoutIntervalForRequest = 10 // secondes
        self.managerOSM = Alamofire.Manager(configuration: configurationOSM)
        
        let configurationGM = NSURLSessionConfiguration.defaultSessionConfiguration()
        configurationGM.timeoutIntervalForRequest = 10 // secondes
        self.managerGM = Alamofire.Manager(configuration: configurationGM)
        
        /// cr√©ation des options pour les notifications KVO : ancienne et nouvelle valeur
        let options = NSKeyValueObservingOptions.New | NSKeyValueObservingOptions.Old
        
        /// ajout d'un observateur : self recevra les notifications de l'attribut selectedMarker de l'objet mapView et les deux valeurs (ancienne et nouvelle) de selectedMarker seront pass√©es √† la m√©thode qui observe
        mapView.addObserver(self, forKeyPath: "selectedMarker", options: options, context: &MyObservationContext)
        
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
    }
    
    /**
        Appel√©e juste avant que l'instance soit d√©sallou√© de la m√©moire. Ainsi on supprime l'observateur avant de d√©sallouer l'instance et l'application ne crash pas en d√©sallouant mapView
    */
    deinit {
        mapView.removeObserver(self, forKeyPath: "selectedMarker", context: &MyObservationContext)
    }
    
    /**
        Impl√©mentation de l'observateur (surcharge)
    
        Dans notre cas, on n'observe que selectedMarker, si nil on d√©sactive le bouton d'itin√©raire, tout simplement
    */
    override func observeValueForKeyPath(keyPath: String, ofObject object: AnyObject, change: [NSObject : AnyObject], context: UnsafeMutablePointer<Void>) {
        switch (keyPath, context) {
            case("selectedMarker", &MyObservationContext):
                if self.mapView.selectedMarker == nil {
                    self.itineraryButtonText.enabled = false
                }
            default:
                super.observeValueForKeyPath(keyPath, ofObject: object, change: change, context: context)
        }
    }
    
    func actionSheet(sheet: UIActionSheet!, clickedButtonAtIndex buttonIndex: Int) {
        println("index %d %@", buttonIndex, sheet.buttonTitleAtIndex(buttonIndex));
        if buttonIndex > 0 {
            if MapsAppsData().isInstalled(sheet.buttonTitleAtIndex(buttonIndex)) {
                var marker = mapView.selectedMarker as PlaceMarker
                var urlsheme = MapsAppsData().generateURLScheme(sheet.buttonTitleAtIndex(buttonIndex), location: self.locationManager.location.coordinate, address: address!, marker: marker)
                println(urlsheme)
                UIApplication.sharedApplication().openURL(NSURL(string: urlsheme)!)
            } else {
                // erreur application n'est plus install√©
            }
            
        }
    }

    
    // MARK: Localisation
    
    /**
        Appel√©e d√®s que le statut de l'autorisation change : chargement de la vue, changement d'application, etc.
        Si toutes les services sont op√©rationnels, on met √† jour la localisation
    */
    func locationManager(manager: CLLocationManager!, didChangeAuthorizationStatus status: CLAuthorizationStatus) {
        
        if ServicesController().servicesAreWorking() {

                // on affiche le bouton My Location dans la vue et on lance l'actualisation de la localisation
                mapView.settings.myLocationButton = true
                mapView.myLocationEnabled = true
                locationManager.startUpdatingLocation()
            
        }
        
    }
    
    /**
        Appel√© d√®s que la localisation change
        On suppose ici qu'une v√©rification des services a √©t√© effectu√©es avant de lancer l'actualisation de la localisation
    */
    func locationManager(manager: CLLocationManager!, didUpdateLocations locations: [AnyObject]!) {
        if let location = locations.first as? CLLocation {
            
            reverseGeocodeCoordinate(location.coordinate)
            updateMapCameraOnUserLocation()
            locationManager.stopUpdatingLocation()
        }
    }
    
    /**
        Appel√© d√®s que le bouton Ma position est tapp√©
        N'est appel√© que si le service de localisation est activ√© et que l'autorisation est permise
    */
    func didTapMyLocationButtonForMapView(mapView: GMSMapView!) -> Bool {
        if ServicesController().servicesAreWorking() {
            locationManager.startUpdatingLocation()
        }
        return true
    }
    

    /**
        Centre la cam√©ra (vue) sur la localisation actuelle
        On suppose ici qu'une v√©rification des services a √©t√© effectu√©es et que la localisation a √©t√© actualis√© au moins une fois
    */
    func updateMapCameraOnUserLocation() {
        var camera = GMSCameraPosition(target: locationManager.location.coordinate, zoom: 15, bearing: 0, viewingAngle: 0)
        mapView.animateToCameraPosition(camera)
    }
    
    func reverseGeocodeCoordinate(coordinate: CLLocationCoordinate2D) {
        
        let geocoder = GMSGeocoder()
        geocoder.reverseGeocodeCoordinate(coordinate) { response , error in
            if let address = response?.firstResult() {

                let lines = address.lines as [String]
                self.address = join(", ", lines)
            }
        }
    }
    
    /**
        Initie le lancement de la recherche d'emplacements avec les donn√©es remise √† z√©ro
    */
    func launchRecherche() {
        mapView.clear()
        self.markers.removeAll(keepCapacity: false)
        self.emplacements.removeAll(keepCapacity: false)
        self.rayon = RayonRecherche(rawValue: 1)!
        self.getEmplacements(locationManager.location.coordinate, radius: self.rayon)
    }
    
    /**
        V√©rifie les r√©sultats de la recherche et en initie une nouvelle s'il n'y a pas assez de r√©sultats
        Si en revanche il y a assez de r√©sultats, on peut pr√©parer les donn√©es pour le traitement/affichage
    */
    func searchResultsController() {
        if(self.emplacements.count > DataProvider.OpenStreetMap.minimumResults) {
            createMarkersAndBoundsToDisplay()
        } else if let newRayon = RayonRecherche(rawValue: self.rayon.rawValue+1){
            self.emplacements.removeAll(keepCapacity: false)
            self.rayon = newRayon
            self.getEmplacements(locationManager.location.coordinate, radius: self.rayon)
        } else {
            createMarkersAndBoundsToDisplay()
        }
    }
    
    /**
        Traitement & affichage des marqueurs sur la carte
        En m√™me temps, on calcule les bornes afin d'ajuster la cam√©ra pour afficher tous les marqueurs
    */
    func createMarkersAndBoundsToDisplay() {
        SwiftSpinner.show("R√©cup√©ration des informations...")
        var firstLocation: CLLocationCoordinate2D
        var bounds = GMSCoordinateBounds(coordinate: self.locationManager.location.coordinate, coordinate: self.locationManager.location.coordinate)
        if !self.emplacements.isEmpty {
            for place: Emplacement in self.emplacements {
                let marker = PlaceMarker(place: place)
                bounds = bounds.includingCoordinate(marker.position)
                self.markers.append(marker)
                marker.map = mapView
            }
            mapView.animateWithCameraUpdate(GMSCameraUpdate.fitBounds(bounds, withPadding: 50.0))
            SwiftSpinner.hide()
        } else {
            SwiftSpinner.hide()
            AlertViewController().noPlacesFound()
        }
        
    }
    
    /**
        Recherche des emplacements de places gr√¢ce √† l'API d'OSM
    
        :param: coordinate Les coordonn√©es (latitude, longitue) de notre position actuelle
    
        :param: radius Le rayon (en m√®tres) de recherche
    
        La requ√™te est effectu√©e de fa√ßon asynchrone gr√¢ce √† une closure, avec un timeout de 10 secondes.
        Quand la requ√™te est un succ√®s, on appelle une fonction contr√¥leur qui va v√©rifier les r√©sultats.    
    */
    func getEmplacements(coordinate: CLLocationCoordinate2D, radius: RayonRecherche) {
        
        let request = self.managerOSM!.request(DataProvider.OpenStreetMap.GetNodes(coordinate,radius))
        request.validate()
        request.responseSwiftyJSON { request, response, json, error in
            if error == nil {
                let elements = json["elements"].arrayValue

                    for place in elements {
                        var id: String? = place["id"].stringValue
                        var lat: String? = place["lat"].stringValue
                        var lon: String? = place["lon"].stringValue
                        var name: String?
                        var fee: String?
                        var capacity:String?
                        
                        for tag in place["tags"] {
                            switch tag.0 {
                                case "name":
                                    name = tag.1.stringValue
                                case "fee":
                                    fee = tag.1.stringValue
                                case "capacity:disabled":
                                    capacity = tag.1.stringValue
                                default:
                                    break
                            }
                        }

                        var emplacement = Emplacement(id: id, lat: lat, lon: lon, name: name, fee: fee, capacity: capacity)
                        self.emplacements.append(emplacement)
                    }
            
                self.searchResultsController()
            } else {
                SwiftSpinner.hide()
                AlertViewController().errorRequest()
            }
        }
        
    }
    
    /**
        Appel√© d√®s qu'un marqueur est tapp√©
        On retourne faux pour que le comportement par d√©faut soit r√©alis√©
        si les services (internet, localisation) et la localisation sont ok
    */
    func mapView(mapView: GMSMapView!, didTapMarker marker: GMSMarker!) -> Bool {
        if self.mapView.selectedMarker != nil {
            self.mapView.selectedMarker = nil
        }
        if ServicesController().servicesAreWorking() && locationManager.location != nil {
            getInformations(marker as PlaceMarker)
            return false
        } else {
           self.mapView.selectedMarker = nil
            return true
        }
    }
    
    /**
        Appel√© juste avant que infoWindow soit affich√©
        On load notre vue personnalis√©e et on affiche si disponible les informations
    */
    func mapView(mapView: GMSMapView!, markerInfoWindow marker: GMSMarker!) -> UIView! {
        let placeMarker = marker as PlaceMarker
        if let infoView = UIView.viewFromNibName("InfoMarkerWindow") as? InfoMarkerWindow {
            if (infoView.adresse.text == "" && placeMarker.place.adresse == nil) {
                infoView.lock()
            } else if infoView.adresse.text != placeMarker.place.adresse {
                infoView.unlock()
                infoView.adresse.text = placeMarker.place.adresse
                infoView.duration.text = placeMarker.place.duration
                infoView.distance.text = placeMarker.place.distance
                infoView.name.text = placeMarker.place.name
                infoView.capacity.text = placeMarker.place.capacity
                infoView.fee.text = placeMarker.place.fee
                
                self.itineraryButtonText.enabled = true
            }
            
            return infoView
        } else {
            return nil
        }
    }
    
    /**
        Recherche des informations compl√©mentaires entre deux lieux
    
        :param: place Le marqueur s√©lectionn√©
    
        On effectue une requ√™te sur l'API de Google Maps afin de r√©cup√©rer l'adresse du lieu de destination ainsi que la distance et le temps de parcours pour se rendre sur ce lieu, gr√¢ce √† la position actuelle.
    
        La requ√™te est effectu√©e de fa√ßon asynchrone gr√¢ce √† une closure, avec un timeout de 10 secondes.
    */
    func getInformations(place: PlaceMarker) {
        if place.place.adresse == nil {
            let request = self.managerGM!.request(DataProvider.GoogleMaps.DistanceMatrix(self.locationManager.location.coordinate, place.position))
            request.validate()
            request.responseSwiftyJSON { request, response, json, error in
                if error == nil  {
                    var dataRecup = json
                    var status:String? = dataRecup["status"].stringValue
                    
                    var adresse:String?
                    var duration:String?
                    var distance:String?
                    
                    if status == "OK" {
                        
                        var destination = dataRecup["destination_addresses"]
                        
                        if !destination.isEmpty {
                            adresse = destination.arrayValue[0].stringValue
                        }
                        
                        var rows = dataRecup["rows"].arrayValue
                        
                        if !rows.isEmpty {
                            
                            let element = rows[0]["elements"].arrayValue
                            
                            let firstData = element[0]
                            
                            if firstData["status"].stringValue == "OK" {
                                
                                duration = firstData["duration"]["text"].stringValue
                                
                                distance = firstData["distance"]["text"].stringValue
                            }
                            
                        }
                            
                        place.place.setInfos(adresse, dur: duration, dist: distance)

                        self.mapView.selectedMarker = place
                        
                    } else {
                        self.mapView.selectedMarker = nil
                        AlertViewController().errorResponseGoogle()
                    }
                    
                } else {
                    self.mapView.selectedMarker = nil
                    AlertViewController().errorRequest()
                }
            }
        }
    }

}



