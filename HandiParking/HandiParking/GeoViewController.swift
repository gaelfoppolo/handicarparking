//
//  GeoViewController.swift
//  HandiParking
//
//  Created by Ga√´l on 10/03/2015.
//  Copyright (c) 2015 KeepCore. All rights reserved.
//

import UIKit
import CoreLocation
import Alamofire
import SwiftyJSON
import MapKit

/// Contr√¥leur de la vue g√©olocalisation üìç

class GeoViewController: UIViewController, CLLocationManagerDelegate, GMSMapViewDelegate, UIActionSheetDelegate, SwiftSpinnerDelegate {
    
    //MARK: Outlets
    
    /// la carte
    @IBOutlet weak var mapView: GMSMapView!
    
    /// petit r√©sum√© des places trouv√©es
    @IBOutlet weak var resultsInRadius: LTMorphingLabel!
    
    /// loader lors du chargement des informations d'infoWindow
    @IBOutlet weak var loadingInfoWindow: UIView!
    
    /// bouton StreetView
    @IBOutlet weak var streetViewButtonText: UIBarButtonItem!
    
    /// bouton itin√©raire
    @IBOutlet weak var itineraryButtonText: UIBarButtonItem!
    
    /**
        Appel√©e quand le bouton lancement est tap√©
    */
    @IBAction func launchButtonAction(sender: AnyObject) {
        launchAction()
    }
    
    /**
        Appel√©e quand le bouton itin√©raire est tap√©
    */
    @IBAction func itineraryButtonAction(sender: AnyObject) {
        itineraryAction()
    }

    /**
        Appel√©e quand le bouton StreetView est tap√©
    */
    @IBAction func streetViewButtonAction(sender: AnyObject) {
        streetViewAction()
    }
    
    ///MARK: Property
    
    /// d√©claration d'un alias pour les notifications KVO + instanciation d'un contexte
    typealias KVOContext = UInt8
    var MyObservationContext = KVOContext()
    
    /// gestionnaire de la localisation
    var locationManager = CLLocationManager()
    
    /// rayon de recherche (m√®tres) des emplacements
    var radius: SearchRadius = SearchRadius(rawValue: 1)!
    
    /// liste des emplacements r√©cup√©r√©s
    var parkingSpaces = [ParkingSpace]()
    
    /// gestionnaire des requ√™tes pour OpenStreetMap
    var managerOSM: Alamofire.Manager?
    
    /// gestionnaire des requ√™tes pour Google Maps
    var managerGM: Alamofire.Manager?
    
    /// tableau de marqueurs ajout√©s sur la carte
    var markers = [PlaceMarker]()
    
    /// requ√™te de recherche OpenStreetMap (permet de l'annuler √† tout moment)
    var requestOSM: Alamofire.Request?
    
    // MARK: Init & deinit
    
    /**
        Instanciation de la vue
        
        - initialise les composants n√©cessaires
    */
    override func viewDidLoad() {
        
        super.viewDidLoad()
        // fait de la vue le d√©l√©gu√© de locationMananger afin d'utiliser la localisation
        // demande l'autorisation si besoin
        // fait de la vue le d√©l√©gu√© de map afin d'utiliser la carte
        locationManager.delegate = self
        locationManager.requestWhenInUseAuthorization()
        mapView.delegate = self
        
        // instanciation du manager de requ√™tes OSM + GM
        let configurationOSM = NSURLSessionConfiguration.defaultSessionConfiguration()
        configurationOSM.timeoutIntervalForRequest = 10 // secondes
        managerOSM = Alamofire.Manager(configuration: configurationOSM)
        
        let configurationGM = NSURLSessionConfiguration.defaultSessionConfiguration()
        configurationGM.timeoutIntervalForRequest = 10 // secondes
        managerGM = Alamofire.Manager(configuration: configurationGM)
        
        /// cr√©ation des options pour les notifications KVO : ancienne et nouvelle valeur
        let options = NSKeyValueObservingOptions.New | NSKeyValueObservingOptions.Old
        
        /// ajout d'un observateur : self recevra les notifications de l'attribut selectedMarker de l'objet map et les deux valeurs (ancienne et nouvelle) de selectedMarker seront pass√©es √† la m√©thode qui observe
        mapView.addObserver(self, forKeyPath: "selectedMarker", options: options, context: &MyObservationContext)
        
        self.loadingInfoWindow.backgroundColor = UIColor.whiteColor().colorWithAlphaComponent(0.0)
        
    }
    
    /**
        Appel√© juste avant que la vue apparaisse (nom de la fonction assez obvious)
    
        D'apr√®s mois, comme notre ViewController est utilis√© comme parent et que SwiftSpinner est un singleton, le delegate ne fait pas de liaison dynamique ascendante une fois que le fils de ce ViewController est instanci√©. Ainsi on doit red√©finir le delegate d√®s que la vue apparait sinon la liaison reste bloqu√©e dans le ViewController le plus bas dans la hi√©rarchie. 
            D√®s que SearchSelectedViewController est instanci√©, il devient le ViewController le plus bas de la hi√©rarchie et donc quand on revient sur GeoViewController (son p√®re), le delegate se fait toujours sur SearchSelectedViewController. On doit donc manuellement red√©finir le delegate √† l'apparition de la vue pour que le delegate se fasse sur le bon ViewController.
    */
    override func viewWillAppear(animated: Bool) {
        SwiftSpinner.sharedInstance.delegate = self
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
    }
    
    /**
        Impl√©mentation de l'observateur
    
        Dans notre cas, on n'observe que selectedMarker, si nil on d√©sactive les boutons itin√©raire et StreetView, tout simplement
    */
    override func observeValueForKeyPath(keyPath: String, ofObject object: AnyObject, change: [NSObject : AnyObject], context: UnsafeMutablePointer<Void>) {
        switch (keyPath, context) {
        case("selectedMarker", &MyObservationContext):
            if mapView.selectedMarker == nil {
                setButtonsItineraryAndStreetViewInState(false)
                unloadInfoWindow()
            }
        default:
            super.observeValueForKeyPath(keyPath, ofObject: object, change: change, context: context)
        }
    }
    
    // MARK: ActionSheet

    
    /**
        Appel√©e juste avant que l'instance soit d√©sallou√© de la m√©moire. Ainsi on supprime l'observateur avant de d√©sallouer l'instance et l'application ne crash pas en d√©sallouant la carte
    */
    deinit {
        mapView.removeObserver(self, forKeyPath: "selectedMarker", context: &MyObservationContext)
    }
    
    /**
        Appel√©e d√®s qu'un bouton de l'action sheet est tapp√©
        On test si l'application est toujours install√©e, on g√©n√®re l'URL scheme et on bascule vers l'application choisie
    */
    func actionSheet(sheet: UIActionSheet, clickedButtonAtIndex buttonIndex: Int) {
        if buttonIndex > 0 {
            if MapsAppsData().isInstalled(sheet.buttonTitleAtIndex(buttonIndex)) {
                var marker = mapView.selectedMarker as! PlaceMarker
                var urlscheme: NSString = MapsAppsData().generateURLScheme(sheet.buttonTitleAtIndex(buttonIndex), location: self.locationManager.location.coordinate, marker: marker)
                // on parse l'URL sinon les caract√®res Unicode font crasher lors de openURL()
                var urlParse: NSString = urlscheme.stringByAddingPercentEscapesUsingEncoding(NSUTF8StringEncoding)!
                UIApplication.sharedApplication().openURL(NSURL(string: urlParse as String)!)
            } else {
                AlertViewController().appsDeleted(sheet.buttonTitleAtIndex(buttonIndex))
            }
            
        }
    }
    
    // MARK: Localisation
    
    /**
        Appel√©e d√®s que le statut de l'autorisation change : chargement de la vue, changement d'application, etc.
        Si toutes les services sont op√©rationnels, on met √† jour la localisation
    */
    func locationManager(manager: CLLocationManager!, didChangeAuthorizationStatus status: CLAuthorizationStatus) {
        
        if ServicesController().servicesAreWorking() {
            
            // on affiche le bouton Ma position dans la vue et on lance l'actualisation de la localisation
            mapView.settings.myLocationButton = true
            mapView.myLocationEnabled = true
            locationManager.startUpdatingLocation()
            
        }
        
    }
    
    /**
        Appel√©e d√®s que la localisation change
        On suppose ici qu'une v√©rification des services a √©t√© effectu√©es avant de lancer l'actualisation de la localisation
    */
    func locationManager(manager: CLLocationManager!, didUpdateLocations locations: [AnyObject]!) {
        if let location = locations.first as? CLLocation {
            
            updateMapCameraOnUserLocation()
            locationManager.stopUpdatingLocation()
        }
    }
    
    /**
        Appel√©e d√®s que le bouton Ma position est tapp√©
        N'est appel√©e que si le service de localisation est activ√© et que l'autorisation est permise
    */
    func didTapMyLocationButtonFormap(map: GMSMapView!) -> Bool {
        if ServicesController().servicesAreWorking() {
            locationManager.startUpdatingLocation()
        }
        return true
    }
    
    
    /**
        Centre la cam√©ra (vue) sur la localisation actuelle
        On suppose ici qu'une v√©rification des services a √©t√© effectu√©es et que la localisation a √©t√© actualis√© au moins une fois
    */
    func updateMapCameraOnUserLocation() {
        var camera = GMSCameraPosition(target: locationManager.location.coordinate, zoom: 15, bearing: 0, viewingAngle: 0)
        mapView.animateToCameraPosition(camera)
    }
    
    // MARK: Fonctions de contr√¥le et de lancement
    
    /**
        V√©rifie si on peut lancer la recherche et la lance ou affiche une erreur dans le cas contraire
    */
    func launchAction() {
        if ServicesController().servicesAreWorking() {
            if let locationWasGet = locationManager.location {
                launchRecherche()
            } else {
                AlertViewController().locationWasNotGet()
            }
        }
    }
    
    /**
        V√©rifie si on peut afficher l'action sheet et l'affiche ou g√©n√®re une erreur
    */
    func itineraryAction() {
        if ServicesController().servicesAreWorking() {
            if let locationWasGet = locationManager.location {
                var sheet = MapsAppsData().generateActionSheet()
                sheet.delegate = self
                sheet.showInView(view)
                
            } else {
                AlertViewController().locationWasNotGet()
            }
        }
    }
    
    /**
        V√©rifie si on peut lancer StreetView (connexion Internet)
    */
    func streetViewAction() {
        if ServicesController().servicesAreWorking() {
            
            if ServicesController().checkInternetConnection() {
                var streetView = StreetViewController(marker: mapView.selectedMarker as! PlaceMarker)
                presentViewController(streetView, animated: true, completion: nil)
            }
        }
        
    }
    
    /**
        Initie le lancement de la recherche d'emplacements en remettant les donn√©es √† z√©ro
    */
    func launchRecherche() {
        parkingSpaces.removeAll(keepCapacity: false)
        radius = SearchRadius(rawValue: 1)!
        getEmplacements(sourceOfSearch(), radius: radius)
        self.resultsInRadius.text = nil
    }
    
    /**
        V√©rifie les r√©sultats de la recherche et en initie une nouvelle s'il n'y a pas assez de r√©sultats
        Si en revanche il y a assez de r√©sultats, on peut pr√©parer les donn√©es pour le traitement et l'affichage
    */
    func searchResultsController() {
        if(parkingSpaces.count >= DataProvider.OpenStreetMap.minimumResults) {
            resetServerParameters()
            sortAndFilterNearestPlace()
            controlIfPlaceFound()
        } else if let newRadius = SearchRadius(rawValue: radius.rawValue+1){
            parkingSpaces.removeAll(keepCapacity: false)
            radius = newRadius
            getEmplacements(sourceOfSearch(), radius: radius)
        } else {
            resetServerParameters()
            controlIfPlaceFound()
        }
    }
    
    /**
        Retourne les coordonn√©es de la "source", l'emplacement duquel on veut partir
        Ici c'est la position actuelle de l'utilisateur
    */
    func sourceOfSearch() -> CLLocationCoordinate2D {
        return locationManager.location.coordinate
    }
    
    /**
        Tri les places trouv√©es par ordre d√©croissant selon la distance √† vol d'oiseau et ne r√©cup√®re que le minimum de places √† afficher d√©fini dans DataProvider
    */
    func sortAndFilterNearestPlace() {
        
        parkingSpaces.sort({ $0.distance < $1.distance })
        var newParkSpac = [ParkingSpace]()
        
        for index in 0...DataProvider.OpenStreetMap.minimumResults-1 {
            newParkSpac.append(parkingSpaces[index])
        }
        
        parkingSpaces = newParkSpac
    }
    
    /**
        Formatte une cha√Æne qui r√©sume le nombre de places trouv√©es/dans quel rayon
        
        :return: la cha√Æne format√©e pr√™te √† √™tre utilis√©e
    */
    func makeStringSearchResultsInRadius() -> NSString {
        var formattedString:String
        
        switch parkingSpaces.count {
        case 0:
            formattedString = NSLocalizedString("NO_SPACE_FOUND", comment: "no space found")
        default:
            switch parkingSpaces.count {
            case 1:
                formattedString = String(format: NSLocalizedString("NB_SPACE", comment: "nb space"), String(parkingSpaces.count))
            default:
                formattedString = String(format: NSLocalizedString("NB_SPACES", comment: "nb spaces"), String(parkingSpaces.count))
            }
            formattedString += NSLocalizedString("RADIUS_OF", comment: "radius of")
            if radius.value > 500 {
                formattedString += "\(radius.value/1000) km"
            } else {
                formattedString += "\(radius.value) m"
            }
        }
        
        return formattedString
    }
    
    /**
        Cr√©ation du message des r√©sultats + lancement du traitement des markers ou erreur
    */
    func controlIfPlaceFound() {
        if !parkingSpaces.isEmpty {
            createMarkersAndBoundsToDisplay()
        } else {
            SwiftSpinner.hide()
            AlertViewController().noPlacesFound(radius)
        }
        changeSearchResultsEffect()
        self.delay(seconds: 1.3, completion: {
            self.resultsInRadius.text = self.makeStringSearchResultsInRadius()
  as String       })
        
        if resultsInRadius.hidden {
            resultsInRadius.alpha = 0.0
            resultsInRadius.hidden = false
            UIView.animateWithDuration(2.5, animations: {
                self.resultsInRadius.alpha = 0.85
            })
        }
        
    }
    
    /**
        Met √† jour l'effet d'apparition du label de r√©sultats
    
    */
    func changeSearchResultsEffect() {
        switch arc4random_uniform(5) {
        case 0:
            self.resultsInRadius.morphingEffect = .Evaporate
        case 1:
            self.resultsInRadius.morphingEffect = .Fall
        case 2:
            self.resultsInRadius.morphingEffect = .Pixelate
        case 3:
            self.resultsInRadius.morphingEffect = .Sparkle
        default:
            self.resultsInRadius.morphingEffect = .Scale
        }
    }
    
    /**
        Met √† jour le statut des boutons dans l'√©tat activ√© ou d√©sactiv√©
    
        :param: state L'√©tat du bouton √† applique
    
    */
    func setButtonsItineraryAndStreetViewInState(state: Bool) {
        itineraryButtonText.enabled = state
        streetViewButtonText.enabled = state
    }
    
    // MARK: Carte
    
    /**
        Appel√© d√®s qu'un marqueur est tapp√©
        On retourne faux pour que le comportement par d√©faut soit r√©alis√© (ou vrai si on veut l'override)
        Si les services (internet, localisation) et la localisation sont ok et si les informations n'ont pas encore √©t√© r√©cup√©r√©es, on lance leur r√©cup√©ration
    
    */
    func mapView(mapView: GMSMapView!, didTapMarker marker: GMSMarker!) -> Bool {
        if mapView.selectedMarker != nil {
            mapView.selectedMarker = nil
        }
        if ServicesController().servicesAreWorking() && locationManager.location != nil {
            if (marker as! PlaceMarker).place.address == nil {
                reverseGeocodeCoordinate(marker as! PlaceMarker)
            }
            if (marker as! PlaceMarker).place.distanceETA == nil && (marker as! PlaceMarker).place.durationETA == nil {
                getExpectedDistanceAndTravelTime(marker as! PlaceMarker)
            }
        } else {
            mapView.selectedMarker = nil
        }
        return false
    }
    
    /**
        Appel√© juste avant que l'infoWindow soit affich√©
        On load notre vue personnalis√©e et on affiche si disponible les informations
        Si les informations ne sont pas encore disponible (en cours de r√©cup√©ration), on lock la vue
        D√®s que les informations sont disponible (r√©cup√©ration ok ou √©chou√©e), on unlock la vue et on affiche
    */
    func mapView(mapView: GMSMapView!, markerInfoWindow marker: GMSMarker!) -> UIView! {
        let placeMarker = marker as! PlaceMarker
        var optionalDataHasNotBeenSet:Bool = (placeMarker.place.address == nil) || (placeMarker.place.distanceETA == nil) || (placeMarker.place.durationETA == nil)
        var nibName:String
        if placeMarker.place.name == nil {
            nibName = "InfoMarkerWindowWithoutName"
        } else {
            nibName = "InfoMarkerWindow"
        }
        if let infoView = UIView.viewFromNibName(nibName) as? InfoMarkerWindow {
            if (optionalDataHasNotBeenSet) {
                infoView.lock()
                loadInfoWindow()
                
            } else {
                infoView.unlock()
                unloadInfoWindow()
                infoView.address.text = placeMarker.place.address
                infoView.duration.text = placeMarker.place.getDuration() as String
                infoView.distance.text = placeMarker.place.getDistance() as String
                if nibName == "InfoMarkerWindow" {
                    infoView.name.text = placeMarker.place.name
                }
                infoView.capacity.text = placeMarker.place.capacity
                infoView.fee.text = placeMarker.place.fee
                
                setButtonsItineraryAndStreetViewInState(true)
            }
            
            return infoView
        } else {
            return nil
        }
    }
    
    /**
        Ajoute un spinner au bas de la vue pour signaler √† l'utilisateur qu'une activit√© est en cours
    */
    func loadInfoWindow() {
        let loadingView = UIView(frame: CGRectMake(0, 0, self.loadingInfoWindow.bounds.size.width, self.loadingInfoWindow.bounds.size.height))
        loadingView.backgroundColor = UIColor.whiteColor().colorWithAlphaComponent(0.0)
        
        let myActivityIndicatorView: DTIActivityIndicatorView = DTIActivityIndicatorView(frame: CGRectMake(0, 0, 80, 80))
        myActivityIndicatorView.center = loadingView.center
        myActivityIndicatorView.alpha = 0.0
        myActivityIndicatorView.indicatorColor = UIColor(red: 0/255, green: 142/255, blue: 255/255, alpha: 1.0)
        myActivityIndicatorView.indicatorStyle = DTIIndicatorStyle.convInv(.spotify)
        myActivityIndicatorView.startActivity()
        
        loadingView.addSubview(myActivityIndicatorView)
        
        UIView.animateWithDuration(0.5) {
            myActivityIndicatorView.alpha = 1.0
        }
        
        loadingInfoWindow.addSubview(loadingView)
    }
    
    /**
        Supprimer le spinner d'activit√© en bas de la vue
    */
    func unloadInfoWindow() {
        if let views = loadingInfoWindow.subviews as? [UIView] {
            for view in views {
              view.removeFromSuperview()
            }
        }
    }
    
    /**
        Traitement & affichage des marqueurs sur la carte
        En m√™me temps, on calcule les bornes afin d'ajuster la cam√©ra pour afficher tous les marqueurs (+ padding pour laisser de la marge autour de la carte)
    */
    func createMarkersAndBoundsToDisplay() {
        mapView.clear()
        markers.removeAll(keepCapacity: false)
        SwiftSpinner.show(NSLocalizedString("FORMA_DATA", comment: "Formatting data"))
        var firstLocation: CLLocationCoordinate2D
        var bounds = GMSCoordinateBounds(coordinate: sourceOfSearch(), coordinate: sourceOfSearch())
        for place: ParkingSpace in parkingSpaces {
            let marker = PlaceMarker(place: place)
            bounds = bounds.includingCoordinate(marker.position)
            markers.append(marker)
            marker.map = mapView
        }
        mapView.animateWithCameraUpdate(GMSCameraUpdate.fitBounds(bounds, withPadding: 50.0))
        SwiftSpinner.hide()
        
    }
    
    /**
        Permet de changer le serveur OSM sur lequel on effectue les appels
        On fait une rotation sur un tableau et quand on est au bout, on revient au d√©but du tableau
    */
    func switchServer() {
        DataProvider.OpenStreetMap.nbServerUsed++
        var actualServer = DataProvider.OpenStreetMap.actualServer
        
        if actualServer < DataProvider.OpenStreetMap.listOSMServers.count-1 {
            DataProvider.OpenStreetMap.actualServer++
        } else {
            DataProvider.OpenStreetMap.actualServer = 0
        }
    }
    
    /**
        Reset le switch des serveurs
        Appel√©e d√®s que la recherche est un succ√®s
    */
    func resetServerParameters() {
        DataProvider.OpenStreetMap.nbServerUsed = 0
    }
    
    // MARK: Recherche & r√©cup√©ration de donn√©es
    
    /**
        Recherche des emplacements de places gr√¢ce √† l'API d'OSM
    
        :param: coordinate Les coordonn√©es (latitude, longitue) de notre position actuelle
    
        :param: radius Le rayon (en m√®tres) de recherche
    
        La requ√™te est effectu√©e de fa√ßon asynchrone gr√¢ce √† une closure, avec un timeout de 10 secondes.
    
        Apr√®s ce timeout, on swich de serveur (si possible).
    
        Quand la requ√™te est un succ√®s, on appelle une fonction contr√¥leur qui va v√©rifier les r√©sultats.
    */
    func getEmplacements(coordinate: CLLocationCoordinate2D, radius: SearchRadius) {
        
        if radius.rawValue % 2 == 0 {
            SwiftSpinner.show(NSLocalizedString("SEARCHING", comment: "In progress"))
        } else {
            SwiftSpinner.show(NSLocalizedString("WAITING", comment: "In progress 2"))
        }
        self.requestOSM = managerOSM!.request(DataProvider.OpenStreetMap.GetNodes(coordinate,radius)).validate().responseSwiftyJSON({ (request, response, json, error) -> Void in
            if error == nil {
                let elements = json["elements"].arrayValue
                
                for place in elements {
                    var id: String? = place["id"].stringValue
                    var lat: String? = place["lat"].stringValue
                    var lon: String? = place["lon"].stringValue
                    var name: String?
                    var fee: String?
                    var capacity:String?
                    var distance:CLLocationDistance
                    
                    for tag in place["tags"] {
                        switch tag.0 {
                        case "name":
                            name = tag.1.stringValue
                        case "fee":
                            fee = tag.1.stringValue
                        case "capacity:disabled":
                            capacity = tag.1.stringValue
                        default:
                            break
                        }
                    }
                    
                    var nodeLocation = CLLocation(latitude: NSString(string: lat!).doubleValue, longitude: NSString(string: lon!).doubleValue)
                    var selfSource = self.sourceOfSearch()
                    var selfLocation = CLLocation(latitude: selfSource.latitude, longitude: selfSource.longitude)
                    distance = selfLocation.distanceFromLocation(nodeLocation)
                    
                    var parkingSpace = ParkingSpace(id: id, lat: lat, lon: lon, name: name, fee: fee, capacity: capacity, distance: distance)
                    self.parkingSpaces.append(parkingSpace)
                }
                self.searchResultsController()
            } else {
                if error?.code == -999 {
                   SwiftSpinner.show(NSLocalizedString("SEARCH_CANCELLED", comment: "Search cancelled"), animated: false)
                    self.delay(seconds: 1.0, completion: {
                        SwiftSpinner.hide()
                    }) 
                } else {
                    if DataProvider.OpenStreetMap.nbServerUsed < DataProvider.OpenStreetMap.listOSMServers.count-1 {
                        self.switchServer()
                        self.getEmplacements(coordinate, radius: radius)
                    } else {
                        SwiftSpinner.hide()
                        AlertViewController().errorRequest()
                        // remise √† z√©ro des param√®tres de switch serveurs puisque erreur
                        self.resetServerParameters()
                    }
                }
            }
        })
        
    }
    
    /**
        R√©cup√©ration de l'adresse approximative de la place s√©lectionn√©e (Google)
    
        :param: place Le marqueur s√©lectionn√©
    
        On effectue une requ√™te gr√¢ce √† Google Maps SDK afin de r√©cup√©rer l'adresse de la place s√©lectionn√©e
    
        La requ√™te est effectu√©e de fa√ßon asynchrone gr√¢ce √† une closure, avec timeout (d√©fini par Google).
    */
    func reverseGeocodeCoordinate(place: PlaceMarker) {
        let geocoder = GMSGeocoder()
        geocoder.reverseGeocodeCoordinate(place.position) { response , error in
            var address:String?
            if error == nil {
                
                if let addressGet = response?.firstResult() {
                    
                    let lines = addressGet.lines as! [String]
                    address = join(", ", lines)
                }
                
            }
            place.place.setAddress(address)
            self.mapView.selectedMarker = place
        }
    }
    
    /**
        R√©cup√©ration de la distance et du temps de parcours estim√© (Apple) entre la place s√©lectionn√©e et la position actuelle
    
        :param: place Le marqueur s√©lectionn√©
    
        On effectue une requ√™te gr√¢ce √† MapKit (Apple) afin de r√©cup√©rer la distance et le temps de parcours pour se rendre sur ce lieu, en partant de la position actuelle.
    
        La requ√™te est effectu√©e de fa√ßon asynchrone gr√¢ce √† une closure, avec timeout (d√©fini Apple).
    */
    func getExpectedDistanceAndTravelTime(place: PlaceMarker) {
        var sourcePlacemark:MKPlacemark = MKPlacemark(coordinate: locationManager.location.coordinate, addressDictionary: nil)
        var destinationPlacemark:MKPlacemark = MKPlacemark(coordinate: place.position, addressDictionary: nil)
        var source:MKMapItem = MKMapItem(placemark: sourcePlacemark)
        var destination:MKMapItem = MKMapItem(placemark: destinationPlacemark)
        var directionRequest:MKDirectionsRequest = MKDirectionsRequest()
        
        directionRequest.setSource(source)
        directionRequest.setDestination(destination)
        directionRequest.transportType = MKDirectionsTransportType.Automobile
        directionRequest.requestsAlternateRoutes = true
        
        var directions:MKDirections = MKDirections(request: directionRequest)
        
        directions.calculateDirectionsWithCompletionHandler({
            (response: MKDirectionsResponse!, error: NSError?) in
            
            var timeETA:NSTimeInterval?
            var distanceETA:CLLocationDistance?
            
            if response != nil {
                if response.routes.count > 0 {
                    
                    var route = response.routes.first! as! MKRoute
                    
                    timeETA = route.expectedTravelTime
                    
                    distanceETA = route.distance
                    
                }
            }
            place.place.setDistanceAndDurationETA(distanceETA, durETA: timeETA)
            self.mapView.selectedMarker = place
        })
    }
    
    /**
        Recherche des informations compl√©mentaires entre deux lieux
    
        :param: place Le marqueur s√©lectionn√©
    
        On effectue une requ√™te sur l'API de Google Maps afin de r√©cup√©rer l'adresse du lieu de destination ainsi que la distance et le temps de parcours pour se rendre sur ce lieu, gr√¢ce √† la position actuelle.
    
        La requ√™te est effectu√©e de fa√ßon asynchrone gr√¢ce √† une closure, avec un timeout de 10 secondes.
    */
    func getInformations(place: PlaceMarker) {
        if place.place.address == nil {
            let request = managerGM!.request(DataProvider.GoogleMaps.DistanceMatrix(locationManager.location.coordinate, place.position))
            request.validate()
            request.responseSwiftyJSON({ (request, response, json, error) -> Void in
                if error == nil  {
                    var dataRecup = json
                    var status:String? = dataRecup["status"].stringValue
                    
                    var adresse:String?
                    var duration:String?
                    var distance:String?
                    
                    if status == "OK" {
                        
                        var destination = dataRecup["destination_addresses"]
                        
                        if !destination.isEmpty {
                            adresse = destination.arrayValue[0].stringValue
                        }
                        
                        var rows = dataRecup["rows"].arrayValue
                        
                        if !rows.isEmpty {
                            
                            let element = rows[0]["elements"].arrayValue
                            
                            let firstData = element[0]
                            
                            if firstData["status"].stringValue == "OK" {
                                
                                duration = firstData["duration"]["text"].stringValue
                                
                                distance = firstData["distance"]["text"].stringValue
                                
                                println("Distance estim√©e \(distance)")
                                println("Temps estim√© \(duration)")
                            }
                            
                        }
                        
                        self.mapView.selectedMarker = place
                        
                    } else {
                        self.mapView.selectedMarker = nil
                        AlertViewController().errorResponseGoogle()
                    }
                    
                } else {
                    self.mapView.selectedMarker = nil
                    AlertViewController().errorRequest()
                }
            })
        }
    }
    
    /**
        Permet de lancer un timer avec completion handler
        :param: #seconds: le nombre de secondes √† attendre avant d'effectuer l'action dans le handler
        :param: le handler
    */
    func delay(#seconds: Double, completion:()->()) {
        let popTime = dispatch_time(DISPATCH_TIME_NOW, Int64( Double(NSEC_PER_SEC) * seconds ))
        
        dispatch_after(popTime, dispatch_get_main_queue()) {
            completion()
        }
    }
    
    //MARK: SwiftSpinnerDelegate
    
    /**
        Appel√©e d√®s que le bouton close de la vue SwiftSpinner est tapp√©
        On annule la requ√™te et remet les variables utilent √† la recherche √† z√©ro
    */
    func didTapCloseButton() {
        self.requestOSM?.cancel()
        changeSearchResultsEffect()
        self.delay(seconds: 1.3, completion: {
            self.resultsInRadius.text = NSLocalizedString("SEARCH_CANCELLED", comment: "Search cancelled")
        })
        if resultsInRadius.hidden {
            resultsInRadius.alpha = 0.0
            resultsInRadius.hidden = false
            UIView.animateWithDuration(2.5, animations: {
                self.resultsInRadius.alpha = 0.85
            })
        }
        parkingSpaces.removeAll(keepCapacity: false)
        radius = SearchRadius(rawValue: 1)!
    }
    
}



